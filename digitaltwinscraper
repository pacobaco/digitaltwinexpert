import os
import json
import requests
from bs4 import BeautifulSoup
import email
import imaplib
from datetime import datetime

class DigitalTwin:
    def __init__(self, worker_id, data_dir="digital_twins"):
        self.worker_id = worker_id
        self.data_dir = os.path.join(data_dir, worker_id)
        os.makedirs(self.data_dir, exist_ok=True)
        self.corpus = []
        self.profile = {
            "authenticated": False,
            "worker_id": worker_id,
            "pay_rate": None,
            "schedule": None,
            "employee_type": None
        }

    def authenticate(self, auth_token):
        """Simulate authentication process."""
        if auth_token == "valid_token":
            self.profile["authenticated"] = True
        else:
            raise ValueError("Invalid authentication token.")

    def update_profile(self, pay_rate, schedule, employee_type):
        """Update worker profile details."""
        if self.profile["authenticated"]:
            self.profile["pay_rate"] = pay_rate
            self.profile["schedule"] = schedule
            self.profile["employee_type"] = employee_type
            with open(os.path.join(self.data_dir, "profile.json"), "w", encoding='utf-8') as file:
                json.dump(self.profile, file, indent=4)
        else:
            raise PermissionError("User not authenticated.")

    def scrape_social_media(self, urls):
        """Scrape worker's social media pages and store content."""
        for url in urls:
            try:
                response = requests.get(url)
                soup = BeautifulSoup(response.text, 'html.parser')
                text = soup.get_text()
                self._store_data("social_media", text)
            except Exception as e:
                print(f"Error scraping {url}: {e}")

    def collect_documents(self, doc_paths):
        """Collect worker's documents and store in corpus."""
        for doc_path in doc_paths:
            try:
                with open(doc_path, 'r', encoding='utf-8') as file:
                    text = file.read()
                    self._store_data("documents", text)
            except Exception as e:
                print(f"Error reading {doc_path}: {e}")

    def fetch_emails(self, email_account, password, imap_url='imap.gmail.com'):
        """Fetch worker's emails and store content."""
        try:
            mail = imaplib.IMAP4_SSL(imap_url)
            mail.login(email_account, password)
            mail.select('inbox')
            
            _, data = mail.search(None, 'ALL')
            for num in data[0].split():
                _, msg_data = mail.fetch(num, '(RFC822)')
                msg = email.message_from_bytes(msg_data[0][1])
                text = msg.get_payload(decode=True).decode('utf-8', errors='ignore')
                self._store_data("emails", text)
        except Exception as e:
            print(f"Error fetching emails: {e}")

    def _store_data(self, category, text):
        """Store collected data in the corpus."""
        timestamp = datetime.utcnow().isoformat()
        entry = {"category": category, "timestamp": timestamp, "text": text}
        self.corpus.append(entry)
        with open(os.path.join(self.data_dir, "corpus.json"), "w", encoding='utf-8') as file:
            json.dump(self.corpus, file, indent=4)

    def query_corpus(self, keyword):
        """Query the stored corpus for relevant information."""
        results = [entry for entry in self.corpus if keyword.lower() in entry["text"].lower()]
        return results
    
    def schedule_meeting(self, date_time, location, query_topic):
        """Schedule an in-person meeting with talking points from the query."""
        talking_points = self.query_corpus(query_topic)
        meeting_details = {
            "date_time": date_time,
            "location": location,
            "talking_points": talking_points
        }
        with open(os.path.join(self.data_dir, "meetings.json"), "w", encoding='utf-8') as file:
            json.dump(meeting_details, file, indent=4)
        return meeting_details

# Example Usage
dt = DigitalTwin("worker123")
dt.authenticate("valid_token")
dt.update_profile(25.50, "9AM-5PM", "Full-time")
dt.scrape_social_media(["https://example.com/social-profile"])
dt.collect_documents(["/path/to/document.txt"])
dt.fetch_emails("worker@example.com", "password")
print(dt.query_corpus("project update"))
print(dt.schedule_meeting("2023-12-15 10:00", "Conference Room A", "project update"))
